"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_tag_1 = __importDefault(require("graphql-tag"));
const buildQuery_1 = require("./buildQuery");
describe('buildQuery', () => {
    const queryType = 'query_type';
    const resource = {
        type: { name: 'Post' },
        GET_LIST: queryType,
    };
    const introspectionResults = {
        resources: [resource],
    };
    it('throws an error if resource is unknown', () => {
        expect(() => buildQuery_1.buildQueryFactory()(introspectionResults)('GET_LIST', 'Comment')).toThrow('Unknown resource Comment. Make sure it has been declared on your server side schema. Known resources are Post');
    });
    it('throws an error if resource does not have a query or mutation for specified AOR fetch type', () => {
        expect(() => buildQuery_1.buildQueryFactory()(introspectionResults)('CREATE', 'Post')).toThrow('No query or mutation matching fetch type CREATE could be found for resource Post');
    });
    it('correctly builds a query and returns it along with variables and parseResponse', () => {
        const buildVariables = jest.fn(() => ({ foo: true }));
        const buildGqlQuery = jest.fn(() => graphql_tag_1.default `
                    query {
                        id
                    }
                `);
        const getResponseParser = jest.fn(() => 'parseResponseFunction');
        const buildVariablesFactory = jest.fn(() => buildVariables);
        const buildGqlQueryFactory = jest.fn(() => buildGqlQuery);
        const getResponseParserFactory = jest.fn(() => getResponseParser);
        expect(buildQuery_1.buildQueryFactory(buildVariablesFactory, buildGqlQueryFactory, getResponseParserFactory)(introspectionResults)('GET_LIST', 'Post', { foo: 'bar' })).toEqual({
            query: graphql_tag_1.default `
                query {
                    id
                }
            `,
            variables: { foo: true },
            parseResponse: 'parseResponseFunction',
        });
        expect(buildVariablesFactory).toHaveBeenCalledWith(introspectionResults);
        expect(buildGqlQueryFactory).toHaveBeenCalledWith(introspectionResults);
        expect(getResponseParserFactory).toHaveBeenCalledWith(introspectionResults);
        expect(buildVariables).toHaveBeenCalledWith(resource, 'GET_LIST', { foo: 'bar' }, queryType);
        expect(buildGqlQuery).toHaveBeenCalledWith(resource, 'GET_LIST', queryType, { foo: true });
        expect(getResponseParser).toHaveBeenCalledWith('GET_LIST', resource, queryType);
    });
});
//# sourceMappingURL=buildQuery.test.js.map