"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ra_core_1 = require("ra-core");
const sanitizeResource = (data) => {
    const result = Object.keys(data).reduce((acc, key) => {
        if (key.startsWith("_")) {
            return acc;
        }
        const dataKey = data[key];
        if (dataKey === null || dataKey === undefined) {
            return acc;
        }
        if (Array.isArray(dataKey)) {
            if (typeof dataKey[0] === "object" && dataKey[0] !== null) {
                return Object.assign(Object.assign({}, acc), { [key]: dataKey.map(sanitizeResource), [`${key}Ids`]: dataKey.map((d) => d.id) });
            }
            else {
                return Object.assign(Object.assign({}, acc), { [key]: dataKey });
            }
        }
        if (typeof dataKey === "object" && dataKey !== null) {
            return Object.assign(Object.assign(Object.assign({}, acc), (dataKey &&
                dataKey.id && {
                [`${key}.id`]: dataKey.id,
            })), { [key]: sanitizeResource(dataKey) });
        }
        return Object.assign(Object.assign({}, acc), { [key]: dataKey });
    }, {});
    return result;
};
const getResponseParser = (introspectionResults) => (aorFetchType) => (response) => {
    var _a, _b, _c, _d;
    const data = response.data;
    if (aorFetchType === ra_core_1.GET_LIST ||
        aorFetchType === ra_core_1.GET_MANY ||
        aorFetchType === ra_core_1.GET_MANY_REFERENCE) {
        return {
            data: (_b = (_a = response === null || response === void 0 ? void 0 : response.data) === null || _a === void 0 ? void 0 : _a.items) === null || _b === void 0 ? void 0 : _b.map(sanitizeResource),
            total: (_d = (_c = response === null || response === void 0 ? void 0 : response.data) === null || _c === void 0 ? void 0 : _c.total) === null || _d === void 0 ? void 0 : _d.count,
        };
    }
    return { data: sanitizeResource(data.data) };
};
exports.default = getResponseParser;
//# sourceMappingURL=getResponseParser.js.map