"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildQuery = void 0;
const merge_1 = __importDefault(require("lodash/merge"));
const ra_data_graphql_1 = __importDefault(require("ra-data-graphql"));
const pluralize_1 = __importDefault(require("pluralize"));
const camel_case_1 = require("camel-case");
const buildQuery_1 = __importDefault(require("./buildQuery"));
const ra_core_1 = require("ra-core");
const defaultOptions = {
    buildQuery: buildQuery_1.default,
    introspection: {
        operationNames: {
            [ra_core_1.GET_ONE]: (resource) => `${camel_case_1.camelCase(resource.name)}`,
            [ra_core_1.GET_LIST]: (resource) => {
                return `${pluralize_1.default(camel_case_1.camelCase(resource.name))}`;
            },
            [ra_core_1.GET_MANY]: (resource) => `${pluralize_1.default(camel_case_1.camelCase(resource.name))}`,
            [ra_core_1.GET_MANY_REFERENCE]: (resource) => `${pluralize_1.default(camel_case_1.camelCase(resource.name))}`,
        },
    },
};
exports.buildQuery = buildQuery_1.default;
exports.default = (options) => {
    return ra_data_graphql_1.default(merge_1.default({}, defaultOptions, options)).then((defaultDataProvider) => {
        return (fetchType, resource, params) => {
            if (fetchType === ra_core_1.DELETE_MANY) {
                throw new Error(`DELETE_MANY is not supported by this data provider`);
            }
            if (fetchType === ra_core_1.UPDATE_MANY) {
                throw new Error(`UPDATE_MANY is not supported by this data provider`);
            }
            return defaultDataProvider(fetchType, resource, params);
        };
    });
};
//# sourceMappingURL=index.js.map