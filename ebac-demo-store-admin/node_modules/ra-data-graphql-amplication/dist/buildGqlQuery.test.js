"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_1 = require("graphql");
const ra_core_1 = require("ra-core");
const buildGqlQuery_1 = __importStar(require("./buildGqlQuery"));
describe('getArgType', () => {
    it('returns the arg type', () => {
        expect(graphql_1.print(buildGqlQuery_1.getArgType({ type: { kind: graphql_1.TypeKind.SCALAR, name: 'foo' } }))).toEqual('foo');
    });
    it('returns the arg type for NON_NULL types', () => {
        expect(graphql_1.print(buildGqlQuery_1.getArgType({
            type: {
                kind: graphql_1.TypeKind.NON_NULL,
                ofType: { name: 'ID', kind: graphql_1.TypeKind.SCALAR },
            },
        }))).toEqual('ID!');
    });
    it('returns the arg type for LIST types', () => {
        expect(graphql_1.print(buildGqlQuery_1.getArgType({
            type: {
                kind: graphql_1.TypeKind.LIST,
                ofType: { name: 'ID', kind: graphql_1.TypeKind.SCALAR },
            },
        }))).toEqual('[ID]');
    });
    it('returns the arg type for LIST types of NON_NULL type', () => {
        expect(graphql_1.print(buildGqlQuery_1.getArgType({
            type: {
                kind: graphql_1.TypeKind.LIST,
                ofType: {
                    kind: graphql_1.TypeKind.NON_NULL,
                    ofType: {
                        kind: graphql_1.TypeKind.SCALAR,
                        name: 'ID',
                    },
                },
            },
        }))).toEqual('[ID!]');
    });
});
describe('buildArgs', () => {
    it('returns an empty array when query does not have any arguments', () => {
        expect(buildGqlQuery_1.buildArgs({ args: [] })).toEqual([]);
    });
    it('returns an array of args correctly filtered when query has arguments', () => {
        expect(graphql_1.print(buildGqlQuery_1.buildArgs({ args: [{ name: 'foo' }, { name: 'bar' }] }, { foo: 'foo_value' }))).toEqual(['foo: $foo']);
    });
});
describe('buildApolloArgs', () => {
    it('returns an empty array when query does not have any arguments', () => {
        expect(graphql_1.print(buildGqlQuery_1.buildApolloArgs({ args: [] }))).toEqual([]);
    });
    it('returns an array of args correctly filtered when query has arguments', () => {
        expect(graphql_1.print(buildGqlQuery_1.buildApolloArgs({
            args: [
                {
                    name: 'foo',
                    type: {
                        kind: graphql_1.TypeKind.NON_NULL,
                        ofType: {
                            kind: graphql_1.TypeKind.SCALAR,
                            name: 'Int',
                        },
                    },
                },
                {
                    name: 'barId',
                    type: { kind: graphql_1.TypeKind.SCALAR, name: 'ID' },
                },
                {
                    name: 'barIds',
                    type: {
                        kind: graphql_1.TypeKind.LIST,
                        ofType: {
                            kind: graphql_1.TypeKind.NON_NULL,
                            ofType: {
                                kind: graphql_1.TypeKind.SCALAR,
                                name: 'ID',
                            },
                        },
                    },
                },
                { name: 'bar' },
            ],
        }, { foo: 'foo_value', barId: 100, barIds: [101, 102] }))).toEqual(['$foo: Int!', '$barId: ID', '$barIds: [ID!]']);
    });
});
describe('buildFields', () => {
    it('returns an object with the fields to retrieve', () => {
        const introspectionResults = {
            resources: [{ type: { name: 'resourceType' } }],
            types: [
                {
                    name: 'linkedType',
                    fields: [
                        {
                            name: 'id',
                            type: { kind: graphql_1.TypeKind.SCALAR, name: 'ID' },
                        },
                    ],
                },
            ],
        };
        const fields = [
            { type: { kind: graphql_1.TypeKind.SCALAR, name: 'ID' }, name: 'id' },
            {
                type: { kind: graphql_1.TypeKind.SCALAR, name: '_internalField' },
                name: 'foo1',
            },
            {
                type: { kind: graphql_1.TypeKind.OBJECT, name: 'linkedType' },
                name: 'linked',
            },
            {
                type: { kind: graphql_1.TypeKind.OBJECT, name: 'resourceType' },
                name: 'resource',
            },
        ];
        expect(graphql_1.print(buildGqlQuery_1.buildFields(introspectionResults)(fields))).toEqual([
            'id',
            `linked {
  id
}`,
            `resource {
  id
}`,
        ]);
    });
});
describe('buildFieldsWithCircularDependency', () => {
    it('returns an object with the fields to retrieve', () => {
        const introspectionResults = {
            resources: [{ type: { name: 'resourceType' } }],
            types: [
                {
                    name: 'linkedType',
                    fields: [
                        {
                            name: 'id',
                            type: { kind: graphql_1.TypeKind.SCALAR, name: 'ID' },
                        },
                        {
                            name: 'child',
                            type: { kind: graphql_1.TypeKind.OBJECT, name: 'linkedType' },
                        },
                    ],
                },
            ],
        };
        const fields = [
            { type: { kind: graphql_1.TypeKind.SCALAR, name: 'ID' }, name: 'id' },
            {
                type: { kind: graphql_1.TypeKind.SCALAR, name: '_internalField' },
                name: 'foo1',
            },
            {
                type: { kind: graphql_1.TypeKind.OBJECT, name: 'linkedType' },
                name: 'linked',
            },
            {
                type: { kind: graphql_1.TypeKind.OBJECT, name: 'resourceType' },
                name: 'resource',
            },
        ];
        expect(graphql_1.print(buildGqlQuery_1.buildFields(introspectionResults)(fields))).toEqual([
            'id',
            `linked {
  id
}`,
            `resource {
  id
}`,
        ]);
    });
});
describe('buildFieldsWithSameType', () => {
    it('returns an object with the fields to retrieve', () => {
        const introspectionResults = {
            resources: [{ type: { name: 'resourceType' } }],
            types: [
                {
                    name: 'linkedType',
                    fields: [
                        {
                            name: 'id',
                            type: { kind: graphql_1.TypeKind.SCALAR, name: 'ID' },
                        },
                    ],
                },
            ],
        };
        const fields = [
            { type: { kind: graphql_1.TypeKind.SCALAR, name: 'ID' }, name: 'id' },
            {
                type: { kind: graphql_1.TypeKind.SCALAR, name: '_internalField' },
                name: 'foo1',
            },
            {
                type: { kind: graphql_1.TypeKind.OBJECT, name: 'linkedType' },
                name: 'linked',
            },
            {
                type: { kind: graphql_1.TypeKind.OBJECT, name: 'linkedType' },
                name: 'anotherLinked',
            },
            {
                type: { kind: graphql_1.TypeKind.OBJECT, name: 'resourceType' },
                name: 'resource',
            },
        ];
        expect(graphql_1.print(buildGqlQuery_1.buildFields(introspectionResults)(fields))).toEqual([
            'id',
            `linked {
  id
}`,
            `anotherLinked {
  id
}`,
            `resource {
  id
}`,
        ]);
    });
});
describe('buildGqlQuery', () => {
    const introspectionResults = {
        resources: [{ type: { name: 'resourceType' } }],
        types: [
            {
                name: 'linkedType',
                fields: [
                    {
                        name: 'foo',
                        type: { kind: graphql_1.TypeKind.SCALAR, name: 'bar' },
                    },
                ],
            },
        ],
    };
    const resource = {
        type: {
            fields: [
                { type: { kind: graphql_1.TypeKind.SCALAR, name: '' }, name: 'foo' },
                { type: { kind: graphql_1.TypeKind.SCALAR, name: '_foo' }, name: 'foo1' },
                {
                    type: { kind: graphql_1.TypeKind.OBJECT, name: 'linkedType' },
                    name: 'linked',
                },
                {
                    type: { kind: graphql_1.TypeKind.OBJECT, name: 'resourceType' },
                    name: 'resource',
                },
            ],
        },
    };
    const queryType = {
        name: 'allCommand',
        args: [
            {
                name: 'foo',
                type: {
                    kind: graphql_1.TypeKind.NON_NULL,
                    ofType: { kind: graphql_1.TypeKind.SCALAR, name: 'Int' },
                },
            },
            {
                name: 'barId',
                type: { kind: graphql_1.TypeKind.SCALAR },
            },
            {
                name: 'barIds',
                type: { kind: graphql_1.TypeKind.SCALAR },
            },
            { name: 'bar' },
        ],
    };
    const params = { foo: 'foo_value' };
    it('returns the correct query for GET_LIST', () => {
        expect(graphql_1.print(buildGqlQuery_1.default(introspectionResults)(resource, ra_core_1.GET_LIST, queryType, params))).toEqual(`query allCommand($foo: Int!) {
  items: allCommand(foo: $foo) {
    foo
    linked {
      foo
    }
    resource {
      id
    }
  }
  total: _allCommandMeta(foo: $foo) {
    count
  }
}
`);
    });
    it('returns the correct query for GET_MANY', () => {
        expect(graphql_1.print(buildGqlQuery_1.default(introspectionResults)(resource, ra_core_1.GET_MANY, queryType, params))).toEqual(`query allCommand($foo: Int!) {
  items: allCommand(foo: $foo) {
    foo
    linked {
      foo
    }
    resource {
      id
    }
  }
  total: _allCommandMeta(foo: $foo) {
    count
  }
}
`);
    });
    it('returns the correct query for GET_MANY_REFERENCE', () => {
        expect(graphql_1.print(buildGqlQuery_1.default(introspectionResults)(resource, ra_core_1.GET_MANY_REFERENCE, queryType, params))).toEqual(`query allCommand($foo: Int!) {
  items: allCommand(foo: $foo) {
    foo
    linked {
      foo
    }
    resource {
      id
    }
  }
  total: _allCommandMeta(foo: $foo) {
    count
  }
}
`);
    });
    it('returns the correct query for GET_ONE', () => {
        expect(graphql_1.print(buildGqlQuery_1.default(introspectionResults)(resource, ra_core_1.GET_ONE, Object.assign(Object.assign({}, queryType), { name: 'getCommand' }), params))).toEqual(`query getCommand($foo: Int!) {
  data: getCommand(foo: $foo) {
    foo
    linked {
      foo
    }
    resource {
      id
    }
  }
}
`);
    });
    it('returns the correct query for UPDATE', () => {
        expect(graphql_1.print(buildGqlQuery_1.default(introspectionResults)(resource, ra_core_1.UPDATE, Object.assign(Object.assign({}, queryType), { name: 'updateCommand' }), params))).toEqual(`mutation updateCommand($foo: Int!) {
  data: updateCommand(foo: $foo) {
    foo
    linked {
      foo
    }
    resource {
      id
    }
  }
}
`);
    });
    it('returns the correct query for CREATE', () => {
        expect(graphql_1.print(buildGqlQuery_1.default(introspectionResults)(resource, ra_core_1.CREATE, Object.assign(Object.assign({}, queryType), { name: 'createCommand' }), params))).toEqual(`mutation createCommand($foo: Int!) {
  data: createCommand(foo: $foo) {
    foo
    linked {
      foo
    }
    resource {
      id
    }
  }
}
`);
    });
    it('returns the correct query for DELETE', () => {
        expect(graphql_1.print(buildGqlQuery_1.default(introspectionResults)(resource, ra_core_1.DELETE, Object.assign(Object.assign({}, queryType), { name: 'deleteCommand' }), params))).toEqual(`mutation deleteCommand($foo: Int!) {
  data: deleteCommand(foo: $foo) {
    foo
    linked {
      foo
    }
    resource {
      id
    }
  }
}
`);
    });
});
//# sourceMappingURL=buildGqlQuery.test.js.map